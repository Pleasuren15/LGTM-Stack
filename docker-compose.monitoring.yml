networks:
  loki:

services:
  # https://grafana.com/docs/loki/latest/
  lgtm-loki:
    image: grafana/loki:latest
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - loki

  # https://grafana.com/docs/grafana/latest/
  lgtm-grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_FEATURE_TOGGLES_ENABLE=alertingSimplifiedRouting,alertingQueryAndExpressionsStepMode
    ports:
      - 3000:3000
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: lgtm-loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://host.docker.internal:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        - name: lgtm-tempo
          type: tempo
          access: proxy
          orgId: 1
          url: http://host.docker.internal:3200
          basicAuth: false
          version: 1
          editable: false
        - name: lgtm-mimir
          type: prometheus
          access: proxy
          orgId: 1
          url: http://host.docker.internal:9090
          basicAuth: false
          version: 1
          editable: false
        - name: lgtm-mimir-alertmanager
          uid: alertmanager
          type: alertmanager
          access: proxy
          orgId: 1
          url: http://host.docker.internal:9090/
          version: 1
          editable: true
        EOF
        /run.sh
    volumes:
      - ./lgtm-config-mimir/grafana-provisioning-dashboards.yaml:/etc/grafana/provisioning/dashboards/provisioning-dashboards.yaml:ro
      # Explicitly list the dashboards we want to show in the demo. We intentionally exclude dashboards that require
      # Kubernetes metrics (eg. resources or networking) and other services not available in the demo (eg. Grafana Loki).
      - ./lgtm-config-mimir/dashboards/mimir-alertmanager.json:/var/lib/grafana/dashboards/mimir-alertmanager.json:ro
      - ./lgtm-config-mimir/dashboards/mimir-compactor.json:/var/lib/grafana/dashboards/mimir-compactor.json:ro
      - ./lgtm-config-mimir/dashboards/mimir-object-store.json:/var/lib/grafana/dashboards/mimir-object-store.json:ro
      - ./lgtm-config-mimir/dashboards/mimir-overrides.json:/var/lib/grafana/dashboards/mimir-overrides.json:ro
      - ./lgtm-config-mimir/dashboards/mimir-queries.json:/var/lib/grafana/dashboards/mimir-queries.json:ro
      - ./lgtm-config-mimir/dashboards/mimir-reads.json:/var/lib/grafana/dashboards/mimir-reads.json:ro
      - ./lgtm-config-mimir/dashboards/mimir-ruler.json:/var/lib/grafana/dashboards/mimir-ruler.json:ro
      - ./lgtm-config-mimir/dashboards/mimir-tenants.json:/var/lib/grafana/dashboards/mimir-tenants.json:ro
      - ./lgtm-config-mimir/dashboards/mimir-top-tenants.json:/var/lib/grafana/dashboards/mimir-top-tenants.json:ro
      - ./lgtm-config-mimir/dashboards/mimir-writes.json:/var/lib/grafana/dashboards/mimir-writes.json:ro
    networks:
      - loki
  
  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo

  # https://grafana.com/docs/tempo/latest/
  lgtm-tempo:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./lgtm-config/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/var/tempo
    ports:
      - "3200:3200" # tempo
      - "4317:4317" # otlp grpc
    networks:
      - loki

  minio:
    image: minio/minio
    entrypoint: [""]
    command: ["sh", "-c", "mkdir -p /data/mimir && minio server --quiet /data"]
    environment:
      - MINIO_ROOT_USER=mimir
      - MINIO_ROOT_PASSWORD=supersecret
    volumes:
      - minio-data:/data

  lgtm-prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --log.level=error
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    volumes:
      - ./lgtm-config-mimir/prometheus.yaml:/etc/prometheus/prometheus.yml
      - ./lgtm-config-mimir/rules/rules.yaml:/etc/prometheus/rules.yaml
    ports:
      - "9090:9090"
    depends_on:
      - "mimir-1"
      - "mimir-2"
      - "mimir-3"
    networks:
      - loki
  
  load-balancer:
    image: nginx:latest
    volumes:
      - ./lgtm-config-mimir/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - "mimir-1"
      - "mimir-2"
      - "mimir-3"
    ports:
      - 9009:9009

  mimir-1:
    image: grafana/mimir:latest
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir-1
    depends_on:
      - minio
    volumes:
      - ./lgtm-config-mimir/mimir.yaml:/etc/mimir.yaml
      - ./lgtm-config-mimir/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - mimir-1-data:/data

  mimir-2:
    image: grafana/mimir:latest
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir-2
    depends_on:
      - minio
    volumes:
      - ./lgtm-config-mimir/mimir.yaml:/etc/mimir.yaml
      - ./lgtm-config-mimir/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - mimir-2-data:/data

  mimir-3:
    image: grafana/mimir:latest
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir-3
    depends_on:
      - minio
    volumes:
      - ./lgtm-config-mimir/mimir.yaml:/etc/mimir.yaml
      - ./lgtm-config-mimir/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - mimir-3-data:/data

volumes:
  mimir-1-data:
  mimir-2-data:
  mimir-3-data:
  minio-data: